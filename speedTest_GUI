import subprocess
import platform
import re
import statistics
import tkinter as tk
from tkinter import scrolledtext
from tkinter import ttk
import threading

GAME_SERVERS = {
    "AWS Tokyo": "ec2.ap-northeast-1.amazonaws.com",
    "AWS Singapore": "ec2.ap-southeast-1.amazonaws.com"
}

def ping_host(host, count=10):
    param = "-n" if platform.system().lower() == "windows" else "-c"
    result = subprocess.run(["ping", param, str(count), host],
                            capture_output=True, text=True)
    output = result.stdout
    times = [float(t) for t in re.findall(r'time[=<]([0-9.]+) ms', output)]
    packet_loss = int(re.search(r'(\d+)% packet loss', output).group(1)) if re.search(r'(\d+)% packet loss', output) else 0
    avg = sum(times)/len(times) if times else 0
    jitter = max(times)-min(times) if times else 0
    stddev = statistics.stdev(times) if len(times) > 1 else 0
    return {"avg_ping": avg, "jitter": jitter, "stddev": stddev, "packet_loss": packet_loss}

def test_speed():
    status_label.config(text="速度測定中…")
    root.update()
    try:
        result = subprocess.run(["speedtest", "--simple"], capture_output=True, text=True)
        output = result.stdout
        download = float(re.search(r"Download: ([0-9.]+) Mbit/s", output).group(1))
        upload = float(re.search(r"Upload: ([0-9.]+) Mbit/s", output).group(1))
        ping = float(re.search(r"Ping: ([0-9.]+) ms", output).group(1))
        return {"download": download, "upload": upload, "ping": ping}
    except:
        return {"download": 0, "upload": 0, "ping": 0}

def evaluate_stability(ping_std, jitter, packet_loss):
    if ping_std < 5 and jitter < 10 and packet_loss == 0:
        return "安定"
    elif ping_std < 10 and jitter < 20 and packet_loss < 1:
        return "普通"
    else:
        return "注意"

def run_test_thread():
    text_area.delete('1.0', tk.END)
    status_label.config(text="測定開始…")
    progress_bar['maximum'] = 1 + len(GAME_SERVERS)
    progress_bar['value'] = 0
    root.update()

    # インターネット速度
    speed = test_speed()
    text_area.insert(tk.END, f"\n=== インターネット速度 ===\n")
    text_area.insert(tk.END, f"ダウンロード: {speed['download']:.2f} Mbps\n")
    text_area.insert(tk.END, f"アップロード: {speed['upload']:.2f} Mbps\n")
    text_area.insert(tk.END, f"Ping（ISP経路）: {speed['ping']:.2f} ms\n\n")
    progress_bar['value'] += 1
    root.update()

    # ゲームサーバーPing測定
    text_area.insert(tk.END, "=== ゲームサーバーPing測定 ===\n")
    for name, host in GAME_SERVERS.items():
        status_label.config(text=f"{name}へのPing測定中…")
        root.update()
        result = ping_host(host)
        stability = evaluate_stability(result['stddev'], result['jitter'], result['packet_loss'])
        text_area.insert(tk.END, f"{name} - 平均Ping: {result['avg_ping']:.2f} ms, "
                                 f"ジッター: {result['jitter']:.2f} ms, "
                                 f"標準偏差: {result['stddev']:.2f}, "
                                 f"パケロス: {result['packet_loss']}%, "
                                 f"安定性: {stability}\n")
        progress_bar['value'] += 1
        root.update()

    status_label.config(text="測定完了！")
    root.update()

def run_test():
    # 別スレッドで実行してGUIをブロックしない
    threading.Thread(target=run_test_thread, daemon=True).start()

# GUI構築
root = tk.Tk()
root.title("ゲーム向け通信品質測定アプリ")
root.geometry("600x500")

label = tk.Label(root, text="ゲーム向け通信品質測定", font=("Arial", 16))
label.pack(pady=10)

btn_test = tk.Button(root, text="測定開始", command=run_test, font=("Arial", 12))
btn_test.pack(pady=5)

status_label = tk.Label(root, text="待機中", font=("Arial", 12), fg="blue")
status_label.pack(pady=5)

progress_bar = ttk.Progressbar(root, orient='horizontal', length=500, mode='determinate')
progress_bar.pack(pady=5)

text_area = scrolledtext.ScrolledText(root, width=70, height=20, font=("Consolas", 10))
text_area.pack(pady=10)

root.mainloop()
